//===--------- IncrementalParser.cpp - Incremental Compilation  -----------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file implements the class which performs incremental code compilation.
//
//===----------------------------------------------------------------------===//

#include "IncrementalParser.h"

#include "clang/CodeGen/BackendUtil.h"
#include "clang/CodeGen/CodeGenAction.h"
#include "clang/CodeGen/ModuleBuilder.h"
#include "clang/Frontend/CompilerInstance.h"
#include "clang/Frontend/FrontendAction.h"
#include "clang/FrontendTool/Utils.h"
#include "clang/Parse/Parser.h"
#include "clang/Sema/Sema.h"

#include "llvm/Option/ArgList.h"
#include "llvm/Support/CrashRecoveryContext.h"
#include "llvm/Support/Error.h"
#include "llvm/Support/Timer.h"

#include <sstream>

using namespace clang;

/// A custom action enabling the incremental processing functionality.
///
/// The usual \p FrontendAction expects one call to ExecuteAction and once it
/// sees a call to \p EndSourceFile it deletes some of the important objects
/// such as \p Preprocessor and \p Sema assuming no further input will come.
///
/// \p IncrementalAction ensures it keep its underlying action's objects alive
/// as long as the \p IncrementalParser needs them.
///
class IncrementalAction : public WrapperFrontendAction {
private:
  bool IsTerminating = false;

public:
  IncrementalAction(CompilerInstance &CI)
    : WrapperFrontendAction(CreateFrontendAction(CI)) {}
  FrontendAction *getWrapped() const { return WrappedAction.get(); }
  void ExecuteAction() override {
    CompilerInstance &CI = getCompilerInstance();
    assert(CI.hasPreprocessor() && "No PP!");

    // FIXME: Move the truncation aspect of this into Sema, we delayed this till
    // here so the source manager would be initialized.
    if (hasCodeCompletionSupport() &&
        !CI.getFrontendOpts().CodeCompletionAt.FileName.empty())
      CI.createCodeCompletionConsumer();

    // Use a code completion consumer?
    CodeCompleteConsumer *CompletionConsumer = nullptr;
    if (CI.hasCodeCompletionConsumer())
      CompletionConsumer = &CI.getCodeCompletionConsumer();

    if (!CI.hasSema())
      CI.createSema(getTranslationUnitKind(), CompletionConsumer);

    Preprocessor &PP = CI.getPreprocessor();
    PP.enableIncrementalProcessing();
    PP.EnterMainSourceFile();
  }

  void EndSourceFile() override {
    if (IsTerminating) {
      WrapperFrontendAction::EndSourceFile();
    }
  }

  void FinalizeAction() {
    assert(!IsTerminating && "Already finalized!");
    IsTerminating = true;
    EndSourceFile();
  }
};

IncrementalParser::IncrementalParser(std::unique_ptr<CompilerInstance> Instance)
  : CI(std::move(Instance)) {
  Act = std::make_unique<IncrementalAction>(*CI);
  CI->ExecuteAction(*Act);
  Consumer = &CI->getASTConsumer();
  P.reset(
      new Parser(CI->getPreprocessor(), CI->getSema(), /*SkipBodies*/ false));
  P->Initialize();
}

IncrementalParser::~IncrementalParser() {
  ((IncrementalAction *)Act.get())->FinalizeAction();
  // Our error handler depends on the Diagnostics object, which we're
  // potentially about to delete. Uninstall the handler now so that any
  // later errors use the default handling behavior instead.
  llvm::remove_fatal_error_handler();
}

bool IncrementalParser::ParseOrWrapTopLevelDecl() {
  // Recover resources if we crash before exiting this method.
  Sema &S = CI->getSema();
  llvm::CrashRecoveryContextCleanupRegistrar<Sema> CleanupSema(&S);
  Sema::GlobalEagerInstantiationScope GlobalInstantiations(S, /*Enabled*/ true);
  Sema::LocalEagerInstantiationScope LocalInstantiations(S);

  // Skip previous eof due to last incremental input.
  if (P->getCurToken().is(tok::eof))
    P->ConsumeToken();

  auto ProcessDecl = [this](Parser::DeclGroupPtrTy ADecl) {
    // If we got a null return and something *was* parsed, ignore it.  This
    // is due to a top-level semicolon, an action override, or a parse error
    // skipping something.
    if (ADecl) {
      if (!Consumer->HandleTopLevelDecl(ADecl.get()))
        return true;
      TopLevelDecls.push_back(ADecl.get());
    }
    return false;
  };

  Parser::DeclGroupPtrTy ADecl;
  if (P->ParseFirstTopLevelDecl(ADecl) || ProcessDecl(ADecl))
    return true;

  bool AtEOF = false;
  while(!AtEOF) {
    AtEOF = P->ParseTopLevelDecl(ADecl);
    if (ProcessDecl(ADecl))
      return true;
  }

  // Process any TopLevelDecls generated by #pragma weak.
  for (Decl *D : S.WeakTopLevelDecls()) {
    DeclGroupRef DGR(D);
    TopLevelDecls.push_back(DGR);
    Consumer->HandleTopLevelDecl(DGR);
  }

  LocalInstantiations.perform();
  GlobalInstantiations.perform();

  Consumer->HandleTranslationUnit(S.getASTContext());

  return CI->getDiagnostics().hasErrorOccurred();
}

CodeGenerator &IncrementalParser::getCodeGen() const {
  IncrementalAction *IncrAct = static_cast<IncrementalAction*>(Act.get());
  FrontendAction *WrappedAct = IncrAct->getWrapped();
  return *static_cast<CodeGenAction*>(WrappedAct)->getCodeGenerator();
}

llvm::Expected<llvm::ArrayRef<DeclGroupRef>>
IncrementalParser::Parse(llvm::StringRef input) {
  Preprocessor &PP = CI->getPreprocessor();
  assert(PP.isIncrementalProcessingEnabled() && "Not in incremental mode!?");

  std::ostringstream SourceName;
  SourceName << "input_line_" << InputCount++;

  // Create an uninitialized memory buffer, copy code in and append "\n"
  size_t InputSize = input.size(); // don't include trailing 0
  // MemBuffer size should *not* include terminating zero
  std::unique_ptr<llvm::MemoryBuffer> MB(
      llvm::WritableMemoryBuffer::getNewUninitMemBuffer(InputSize + 1,
                                                        SourceName.str()));
  char *MBStart = const_cast<char *>(MB->getBufferStart());
  memcpy(MBStart, input.data(), InputSize);
  memcpy(MBStart + InputSize, "\n", 2);

  SourceManager &SM = CI->getSourceManager();

  // Create SourceLocation, which will allow clang to order the overload
  // candidates for example
  SourceLocation NewLoc = SM.getLocForStartOfFile(SM.getMainFileID())
                              .getLocWithOffset(InputCount + 2);

  // Create FileID for the current buffer.
  FileID FID = SM.createFileID(std::move(MB), SrcMgr::C_User, /*LoadedID*/ 0,
                               /*LoadedOffset*/ 0, NewLoc);

  // NewLoc only used for diags.
  PP.EnterSourceFile(FID, /*DirLookup*/ 0, NewLoc);

  unsigned lastTransaction = TopLevelDecls.size();
  if (ParseOrWrapTopLevelDecl())
    return llvm::make_error<llvm::StringError>("Parsing failed.",
                                               std::error_code());

  if (PP.getLangOpts().DelayedTemplateParsing) {
    // Microsoft-specific:
    // Late parsed templates can leave unswallowed "macro"-like tokens.
    // They will seriously confuse the Parser when entering the next
    // source file. So lex until we are EOF.
    Token Tok;
    do {
      PP.Lex(Tok);
    } while (Tok.isNot(tok::eof));
  }

  Token AssertTok;
  PP.Lex(AssertTok);
  assert(AssertTok.is(tok::eof) &&
         "Lexer must be EOF when starting incremental parse!");

  return llvm::makeArrayRef(&TopLevelDecls[lastTransaction],
                            TopLevelDecls.size() - lastTransaction);
}
